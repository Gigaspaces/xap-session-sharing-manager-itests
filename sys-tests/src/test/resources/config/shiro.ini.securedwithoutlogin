[main]
# space proxy wraper
connector = com.gigaspaces.httpsession.SpaceConnector
connector.url = jini://*/*/sessionSpace

# Default lease is 30 minutes - 30 * 60 * 1000 = 1800000
connector.sessionLease = 1800000
# Default read timeout is 5 minutes = 5 * 60 * 1000 = 300000
connector.readTimeout = 300000

connector.sessionBaseName=com.gigaspaces.httpsession.models.DefaultSpaceSessionStore

sessionManager = com.gigaspaces.httpsession.GigaSpacesWebSessionManager

#set the sessionManager to use an enterprise cache for backing storage:
sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
sessionManager.sessionDAO = $sessionDAO

# ensure the securityManager uses our native SessionManager:
securityManager.sessionManager = $sessionManager

# whatever your CacheManager implementation is, for example:
cacheManager = com.gigaspaces.httpsession.sessions.GigaSpacesCacheManager

# Model Manager service
storeMode = com.gigaspaces.httpsession.sessions.DeltaStoreMode
storeMode.connector = $connector
sessionManager.storeMode=$storeMode
cacheManager.storeMode = $storeMode
# Serialization Service

javaSerialization=com.esotericsoftware.kryo.serializers.JavaSerializer
serializer=com.gigaspaces.httpsession.serialize.KryoSerializerImpl
serializer.classSerializers=javax.security.auth.Subject:$javaSerialization

cacheManager.serializer = $serializer
# Session Policy Service
policy = com.gigaspaces.httpsession.policies.SessionPolicyWithoutLogin
policy.connector = $connector
policy.storeMode = $storeMode

cacheManager.policy = $policy
# space proxy setter
cacheManager.connector= $connector

# This will use GigaSpaces for _all_ of Shiro's caching needs (realms, etc), # not just for Session storage.
securityManager.cacheManager = $cacheManager

